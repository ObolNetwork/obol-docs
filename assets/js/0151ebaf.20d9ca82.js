"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[16930],{95788:(e,t,n)=>{n.d(t,{Iu:()=>p,yg:()=>h});var r=n(11504);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),y=o,h=d["".concat(l,".").concat(y)]||d[y]||u[y]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},90776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(45072),o=(n(11504),n(95788));const a={sidebar_position:3,description:"Move the private key shares to the nodes and run the cluster"},i="Deploy the cluster",s={unversionedId:"int/quickstart/alone/deploy",id:"version-v0.18.0/int/quickstart/alone/deploy",title:"Deploy the cluster",description:"Move the private key shares to the nodes and run the cluster",source:"@site/versioned_docs/version-v0.18.0/int/quickstart/alone/deploy.md",sourceDirName:"int/quickstart/alone",slug:"/int/quickstart/alone/deploy",permalink:"/docs/v0.18.0/int/quickstart/alone/deploy",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/versioned_docs/version-v0.18.0/int/quickstart/alone/deploy.md",tags:[],version:"v0.18.0",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Move the private key shares to the nodes and run the cluster"},sidebar:"tutorialSidebar",previous:{title:"Create the private key shares",permalink:"/docs/v0.18.0/int/quickstart/alone/create-keys"},next:{title:"Run a cluster as a group",permalink:"/docs/v0.18.0/int/quickstart/group/"}},l={},c=[],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.c)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"deploy-the-cluster"},"Deploy the cluster"),(0,o.yg)("p",null,"To distribute your cluster physically and start the DV, each node in the cluster needs one of the folders called ",(0,o.yg)("inlineCode",{parentName:"p"},"node*/")," within the output of the ",(0,o.yg)("inlineCode",{parentName:"p"},"create cluster")," command. These folders should be copied to a CDVN repo, and the folder renamed from ",(0,o.yg)("inlineCode",{parentName:"p"},"node0/")," to ",(0,o.yg)("inlineCode",{parentName:"p"},".charon/"),". (Or you can override ",(0,o.yg)("inlineCode",{parentName:"p"},"charon run"),"'s default file locations)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-log",metastring:'title="Output from create cluster"',title:'"Output',from:!0,create:!0,'cluster"':!0},"\ncluster\n\u251c\u2500\u2500 node0\n\u2502   \u251c\u2500\u2500 charon-enr-private-key\n\u2502   \u251c\u2500\u2500 cluster-lock.json\n\u2502   \u251c\u2500\u2500 deposit-data.json\n\u2502   \u2514\u2500\u2500 validator_keys\n\u2502       \u251c\u2500\u2500 keystore-0.json\n\u2502       \u2514\u2500\u2500 keystore-0.txt\n\u251c\u2500\u2500 node1\n\u2502   \u251c\u2500\u2500 charon-enr-private-key\n\u2502   \u251c\u2500\u2500 cluster-lock.json\n\u2502   \u251c\u2500\u2500 deposit-data.json\n\u2502   \u2514\u2500\u2500 validator_keys\n\u2502       \u251c\u2500\u2500 keystore-0.json\n\u2502       \u2514\u2500\u2500 keystore-0.txt\n\u251c\u2500\u2500 node2\n\u2502   \u251c\u2500\u2500 charon-enr-private-key\n\u2502   \u251c\u2500\u2500 cluster-lock.json\n\u2502   \u251c\u2500\u2500 deposit-data.json\n\u2502   \u2514\u2500\u2500 validator_keys\n\u2502       \u251c\u2500\u2500 keystore-0.json\n\u2502       \u2514\u2500\u2500 keystore-0.txt\n\u2514\u2500\u2500 node3\n    \u251c\u2500\u2500 charon-enr-private-key\n    \u251c\u2500\u2500 cluster-lock.json\n    \u251c\u2500\u2500 deposit-data.json\n    \u2514\u2500\u2500 validator_keys\n        \u251c\u2500\u2500 keystore-0.json\n        \u2514\u2500\u2500 keystore-0.txt\n\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-log",metastring:'title="Folder structure to be placed on each DV node"',title:'"Folder',structure:!0,to:!0,be:!0,placed:!0,on:!0,each:!0,DV:!0,'node"':!0},"\u2514\u2500\u2500 .charon\n    \u251c\u2500\u2500 charon-enr-private-key\n    \u251c\u2500\u2500 cluster-lock.json\n    \u251c\u2500\u2500 deposit-data.json\n    \u2514\u2500\u2500 validator_keys\n        \u251c\u2500\u2500 keystore-0.json\n        \u251c\u2500\u2500 keystore-0.txt\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 keystore-N.json\n        \u2514\u2500\u2500 keystore-N.txt\n")),(0,o.yg)("p",null,"\ud83d\udc49 Use the single node ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-node"},"docker compose"),", the kubernetes ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-k8s-distributed-validator-node"},"manifests"),", or the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/helm-charts"},"helm chart")," example repos to get your nodes up and connected after loading the ",(0,o.yg)("inlineCode",{parentName:"p"},".charon")," folder artifacts into them appropriately."),(0,o.yg)("admonition",{type:"caution"},(0,o.yg)("p",{parentName:"admonition"},"Right now, the ",(0,o.yg)("inlineCode",{parentName:"p"},"charon create cluster")," command ",(0,o.yg)("a",{parentName:"p",href:"./create-keys"},"used earlier to create the private keys")," outputs a folder structure like ",(0,o.yg)("inlineCode",{parentName:"p"},"cluster/node*/"),". Make sure to grab the ",(0,o.yg)("inlineCode",{parentName:"p"},"./node*/")," folders, ",(0,o.yg)("em",{parentName:"p"},"rename")," them to ",(0,o.yg)("inlineCode",{parentName:"p"},".charon")," and then move them to one of the single node repos above. Once all nodes are online, synced, and connected, you will be ready to activate your validator.")))}u.isMDXComponent=!0}}]);