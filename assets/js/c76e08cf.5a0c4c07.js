"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[909],{35802:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"run/running/claim-rewards","title":"Claim Rewards","description":"Claim rewards from splitter contracts using Launchpad","source":"@site/docs/run/running/claim-rewards.mdx","sourceDirName":"run/running","slug":"/run/running/claim-rewards","permalink":"/next/run/running/claim-rewards","draft":false,"unlisted":false,"editUrl":"https://github.com/ObolNetwork/obol-docs/edit/main/docs/run/running/claim-rewards.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"description":"Claim rewards from splitter contracts using Launchpad"},"sidebar":"tutorialSidebar","previous":{"title":"Monitoring Your Node","permalink":"/next/run/running/monitoring"},"next":{"title":"Create an EigenLayer DV","permalink":"/next/run/integrations/quickstart-eigenpod"}}');var s=a(74848),n=a(28453);a(49489),a(7227);const i={sidebar_position:5,description:"Claim rewards from splitter contracts using Launchpad"},l="Claim Rewards",o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Claim Status",id:"claim-status",level:2},{value:"Claim Flow",id:"claim-flow",level:2},{value:"Launchpad Edge Cases",id:"launchpad-edge-cases",level:2},{value:"Case 1: The <code>Claimable</code> column doesn\u2019t match the amount next to the <code>Claim All</code> button.",id:"case-1-the-claimable-column-doesnt-match-the-amount-next-to-the-claim-all-button",level:3},{value:"Case 2: You don\u2019t see a <code>Claim All</code> button but instead see <code>Distribute All</code>.",id:"case-2-you-dont-see-a-claim-all-button-but-instead-see-distribute-all",level:3},{value:"Case 3: You just created a new cluster with no active validators or rewards, but it shows a <code>Claim All</code> amount.",id:"case-3-you-just-created-a-new-cluster-with-no-active-validators-or-rewards-but-it-shows-a-claim-all-amount",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"claim-rewards",children:"Claim Rewards"})}),"\n",(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"For every epoch, active validators earn ETH rewards from both the consensus layer and the execution layer. The consensus layer rewards are derived from validator duties such as attestation, proposals, and sync committees. These rewards are accumulated in the validator\u2019s withdrawal address. Execution rewards, which are earned from MEV and transaction priority tips, are accumulated in the fee recipient address."}),"\n",(0,s.jsxs)(t.p,{children:["The method for claiming rewards depends on the Cluster's withdrawal configuration, whether it's an ",(0,s.jsx)(t.a,{href:"/next/learn/intro/obol-splits#optimistic-withdrawal-recipient",children:(0,s.jsx)(t.strong,{children:"OWR"})}),"  or an ",(0,s.jsx)(t.a,{href:"/next/learn/intro/obol-splits#exitable-withdrawal-recipient",children:(0,s.jsx)(t.strong,{children:"Exitable Withdrawal Configuration"})})," . The table below outlines the latest details on how and where to claim rewards."]}),"\n",(0,s.jsx)(t.h2,{id:"claim-status",children:"Claim Status"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Withdrawal Configuration"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Subcategory Description"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Is supported on Launchpad?"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Where to claim?"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"1. Claim principal + rewards without splits - Exit and get rewards\xa0"}),(0,s.jsx)(t.td,{children:"To claim principal or rewards without splits, users currently have to exit the validator."}),(0,s.jsx)(t.td,{children:"\u2705"}),(0,s.jsxs)(t.td,{children:["Cluster details page in the Operator Dashboard. For example, ",(0,s.jsx)(t.a,{href:"https://holesky.launchpad.obol.org/cluster/details/?lockHash=0x42833298f3c767b866615814dd9f86ce35ed2f89bf3d397d5f353a0ad5a38013",children:"here"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"2. Splits only rewards using OWR - ETH"}),(0,s.jsx)(t.td,{children:"For all clusters with ETH rewards."}),(0,s.jsx)(t.td,{children:"\u2705"}),(0,s.jsxs)(t.td,{children:["Cluster details page in the Operator Dashboard. For example, ",(0,s.jsx)(t.a,{href:"https://holesky.launchpad.obol.org/cluster/details/?lockHash=0x42833298f3c767b866615814dd9f86ce35ed2f89bf3d397d5f353a0ad5a38013",children:"here"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"3. Split principal + rewards - ETH"}),(0,s.jsx)(t.td,{children:"For clusters configured to split both principal and rewards."}),(0,s.jsx)(t.td,{children:"\u2705"}),(0,s.jsxs)(t.td,{children:["Operators currently need to use the UI provided by Splits.org. For example, a ",(0,s.jsx)(t.a,{href:"https://app.splits.org/accounts/0x845aF36663a9908D9E46101e3CC658FbCEB783a8/?chainId=1",children:"Lido Split"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"4. Splits non-ETH rewards using any withdrawal config - wstETH or weETH"}),(0,s.jsx)(t.td,{children:"For Lido and EtherFi clusters earning rewards in protocol-specific tokens."}),(0,s.jsx)(t.td,{children:"In Progress \u27a1\ufe0f"}),(0,s.jsxs)(t.td,{children:["Operators currently need to use the UI provided by Splits.org. For example, a ",(0,s.jsx)(t.a,{href:"https://app.splits.org/accounts/0x845aF36663a9908D9E46101e3CC658FbCEB783a8/?chainId=1",children:"Lido Split"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"5. Lido CSM rewards\xa0- wstETH"}),(0,s.jsx)(t.td,{children:"For all Lido CSM clusters earning wstETH rewards."}),(0,s.jsx)(t.td,{children:"In Progress \u27a1\ufe0f"}),(0,s.jsxs)(t.td,{children:["Similar to row number 3, use the Splits UI. More details can be found at the bottom of ",(0,s.jsx)(t.a,{href:"https://docs.obol.org/run/integrations/lido-csm",children:"this page"}),"."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"claim-flow",children:"Claim Flow"}),"\n",(0,s.jsxs)(t.p,{children:["To understand how claims via Launchpad work, it is highly recommended to first understand how splits work. More details are available ",(0,s.jsx)(t.a,{href:"/next/learn/intro/obol-splits",children:(0,s.jsx)(t.strong,{children:"here"})}),". The flowchart below summarizes how an operator and a non-operator can interact with split contracts to facilitate claims:"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"ClaimFlow",src:a(33769).A+"",width:"1200",height:"1053"})}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"All validator rewards are accumulated in the validator's withdrawal address, which is a split wallet."}),"\n",(0,s.jsxs)(t.li,{children:["Claims can be triggered in two ways:","\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"From addresses in the Splitter"}),": Splitter addresses will see a ",(0,s.jsx)(t.code,{children:"Claim All"})," button. When the first address (e.g., address A) executes ",(0,s.jsx)(t.code,{children:"Claim All"}),", it triggers a multi-call transaction to distribute rewards from all the split wallets associated with a cluster into the Split Main. The Split Main then sends address A\u2019s proportion of the rewards (based on the split configuration at the time of cluster creation). All of this is executed with a single click for the first address."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"From addresses not in the Splitter"}),": Non-splitter addresses will see a ",(0,s.jsx)(t.code,{children:"Distribute All"})," button instead of ",(0,s.jsx)(t.code,{children:"Claim All"}),". These addresses cannot claim rewards directly but can distribute rewards to the Split Main (subsidizing transaction fees for others). Operators can then claim rewards later by visiting the same cluster details page."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["Internally, after clicking ",(0,s.jsx)(t.code,{children:"Claim All"})," or ",(0,s.jsx)(t.code,{children:"Distribute All"}),", the split wallet sends the funds to the Split Main contract."]}),"\n",(0,s.jsxs)(t.li,{children:["The Split Main then sends proportional rewards to ",(0,s.jsx)(t.strong,{children:"address A"}),", completing steps 2a, 3, and 4 with a single click."]}),"\n",(0,s.jsxs)(t.li,{children:["Other addresses (e.g., B, C, D) can later click on ",(0,s.jsx)(t.code,{children:"Claim All"})," to receive their share of the rewards."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"launchpad-edge-cases",children:"Launchpad Edge Cases"}),"\n",(0,s.jsx)(t.p,{children:"We are constantly improving the user experience. Below are some edge cases to avoid confusion:"}),"\n",(0,s.jsxs)(t.h3,{id:"case-1-the-claimable-column-doesnt-match-the-amount-next-to-the-claim-all-button",children:["Case 1: The ",(0,s.jsx)(t.code,{children:"Claimable"})," column doesn\u2019t match the amount next to the ",(0,s.jsx)(t.code,{children:"Claim All"})," button."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"ClaimCase1",src:a(72636).A+"",width:"784",height:"567"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"ClaimCase1Validators",src:a(15361).A+"",width:"1052",height:"354"})}),"\n",(0,s.jsxs)(t.p,{children:["In this scenario, someone else (a splitter or non-splitter address) has already distributed rewards to the Split Main (e.g., 0.12 ETH). However, your validators (4 in this case) have earned an additional 0.2 ETH in rewards. Your total effective claimable balance is 0.032 ETH, which you can claim using the ",(0,s.jsx)(t.code,{children:"Claim All"})," button."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["Your total effective claimable amount will always be displayed next to the ",(0,s.jsx)(t.code,{children:"Claim All"})," button."]})}),"\n",(0,s.jsxs)(t.h3,{id:"case-2-you-dont-see-a-claim-all-button-but-instead-see-distribute-all",children:["Case 2: You don\u2019t see a ",(0,s.jsx)(t.code,{children:"Claim All"})," button but instead see ",(0,s.jsx)(t.code,{children:"Distribute All"}),"."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"ClaimCase2",src:a(96567).A+"",width:"861",height:"661"})}),"\n",(0,s.jsx)(t.p,{children:"This happens because the connected address is not listed in the split configuration. You may have used a different operator address from the one in the splitter configuration. You can:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Distribute all rewards using the connected address for all operators and claim using your address in the splitter configuration."}),"\n",(0,s.jsx)(t.li,{children:"Switch to the splitter address and claim directly."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Note: It costs the same gas to distribute rewards for one address as it does for all addresses."}),"\n",(0,s.jsxs)(t.h3,{id:"case-3-you-just-created-a-new-cluster-with-no-active-validators-or-rewards-but-it-shows-a-claim-all-amount",children:["Case 3: You just created a new cluster with no active validators or rewards, but it shows a ",(0,s.jsx)(t.code,{children:"Claim All"})," amount."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"ClaimCase3",src:a(97070).A+"",width:"1752",height:"982"})}),"\n",(0,s.jsxs)(t.p,{children:["The amount shown here is from a previous case and is now sitting in the Split Main, ready to be claimed. Unfortunately, it is not possible to associate the Split Main balance of an address with a specific cluster. If you are part of multiple clusters, your Split Main balance will appear next to all ",(0,s.jsx)(t.code,{children:"Claim All"})," buttons, regardless of the cluster. We are working on a fix to avoid this confusion."]})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},7227:(e,t,a)=>{a.d(t,{A:()=>i});a(96540);var r=a(34164);const s={tabItem:"tabItem_Ymn6"};var n=a(74848);function i(e){let{children:t,hidden:a,className:i}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:a,children:t})}},49489:(e,t,a)=>{a.d(t,{A:()=>C});var r=a(96540),s=a(34164),n=a(24245),i=a(56347),l=a(36494),o=a(62814),d=a(45167),c=a(69900);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:s}}=e;return{value:t,label:a,attributes:r,default:s}}))}(a);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const s=(0,i.W6)(),n=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,o.aZ)(n),(0,r.useCallback)((e=>{if(!n)return;const t=new URLSearchParams(s.location.search);t.set(n,e),s.replace({...s.location,search:t.toString()})}),[n,s])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:s}=e,n=h(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:n}))),[d,u]=m({queryString:a,groupId:s}),[b,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,n]=(0,c.Dv)(a);return[s,(0,r.useCallback)((e=>{a&&n.set(e)}),[a,n])]}({groupId:s}),x=(()=>{const e=d??b;return p({value:e,tabValues:n})?e:null})();(0,l.A)((()=>{x&&o(x)}),[x]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,n]),tabValues:n}}var f=a(11062);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var w=a(74848);function g(e){let{className:t,block:a,selectedValue:r,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,n.a_)(),c=e=>{const t=e.currentTarget,a=o.indexOf(t),s=l[a].value;s!==r&&(d(t),i(s))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;t=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;t=o[a]??o[o.length-1];break}}t?.focus()};return(0,w.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":a},t),children:l.map((e=>{let{value:t,label:a,attributes:n}=e;return(0,w.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>o.push(e),onKeyDown:u,onClick:c,...n,className:(0,s.A)("tabs__item",x.tabItem,n?.className,{"tabs__item--active":r===t}),children:a??t},t)}))})}function j(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,w.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})))})}function v(e){const t=b(e);return(0,w.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,w.jsx)(g,{...t,...e}),(0,w.jsx)(j,{...t,...e})]})}function C(e){const t=(0,f.A)();return(0,w.jsx)(v,{...e,children:u(e.children)},String(t))}},72636:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ClaimCase1-c289226f60fd0a1306e8a8f31c29f3b8.png"},15361:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ClaimCase1Validators-d78ba67f2af149e87a22d27a5cb35ab8.png"},96567:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ClaimCase2-ed47de127cf1e07c36f5b83ad08e0a5e.png"},97070:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ClaimCase3-9ab4b9f9bd03195adabce0f51033b099.png"},33769:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ClaimFlow-2b860e2cb4dc85ff81cf5891d8f7053b.png"},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>l});var r=a(96540);const s={},n=r.createContext(s);function i(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);