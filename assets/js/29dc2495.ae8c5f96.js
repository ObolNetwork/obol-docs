"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[27471],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,y=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7227:(e,t,n)=>{n.d(t,{A:()=>l});var a=n(96540),r=n(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,l),hidden:n},t)}},49489:(e,t,n)=>{n.d(t,{A:()=>N});var a=n(58168),r=n(96540),o=n(20053),l=n(24245),i=n(56347),s=n(62814),c=n(45167),u=n(81269);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,c]=y({queryString:n,groupId:a}),[d,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),g=(()=>{const e=s??d;return h({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),m(e)}),[c,m,o]),tabValues:o}}var g=n(11062);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.a_)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(d(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:p},l,{className:(0,o.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":i===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=m(e);return r.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},r.createElement(b,(0,a.A)({},e,t)),r.createElement(v,(0,a.A)({},e,t)))}function N(e){const t=(0,g.A)();return r.createElement(k,(0,a.A)({key:String(t)},e))}},11389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(58168),r=(n(96540),n(15680)),o=n(49489),l=n(7227);const i={sidebar_position:3,description:"Create a DV alone"},s="Create a DV alone",c={unversionedId:"start/quickstart_alone",id:"start/quickstart_alone",title:"Create a DV alone",description:"Create a DV alone",source:"@site/docs/start/quickstart_alone.md",sourceDirName:"start",slug:"/start/quickstart_alone",permalink:"/docs/next/start/quickstart_alone",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/docs/start/quickstart_alone.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Create a DV alone"},sidebar:"tutorialSidebar",previous:{title:"Quickstart Overview",permalink:"/docs/next/start/quickstart_overview"},next:{title:"Create a DV with a group",permalink:"/docs/next/start/quickstart_group"}},u={},d=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Step 1: Create the key shares locally",id:"step-1-create-the-key-shares-locally",level:2},{value:"Step 2: Deploy and start the nodes",id:"step-2-deploy-and-start-the-nodes",level:2}],p={toc:d},h="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(h,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"create-a-dv-alone"},"Create a DV alone"),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"It is possible for a single operator to manage all of the nodes of a DV cluster. The nodes can be run on a single machine, which is only suitable for testing, or the nodes can be run on multiple machines, which is expected for a production setup."),(0,r.yg)("p",{parentName:"admonition"},"The private key shares can be created centrally and distributed securely to each node. Alternatively, the private key shares can be created in a lower-trust manner with a ",(0,r.yg)("a",{parentName:"p",href:"/docs/next/int/key-concepts#distributed-validator-key-generation-ceremony"},"Distributed Key Generation")," process, which avoids the validator private key being stored in full anywhere, at any point in its lifecycle. Follow the ",(0,r.yg)("a",{parentName:"p",href:"/docs/next/start/quickstart_group"},"group quickstart")," instead for this latter case.")),(0,r.yg)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,r.yg)("ul",null,(0,r.yg)("li",null,"A basic ",(0,r.yg)("a",{href:"https://docs.ethstaker.cc/ethstaker-knowledge-base/",target:"_blank"},"knowledge")," of Ethereum nodes and validators."),(0,r.yg)("li",null,"Ensure you have ",(0,r.yg)("a",{href:"https://git-scm.com/downloads",target:"_blank"},"git")," installed."),(0,r.yg)("li",null,"Ensure you have ",(0,r.yg)("a",{href:"https://docs.docker.com/engine/install/",target:"_blank"},"docker")," installed."),(0,r.yg)("li",null,"Make sure ",(0,r.yg)("code",null,"docker")," is running before executing the commands below.")),(0,r.yg)("h2",{id:"step-1-create-the-key-shares-locally"},"Step 1: Create the key shares locally"),(0,r.yg)(o.A,{groupId:"Launchpad-other",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Launchpad",label:"Launchpad",default:!0,mdxType:"TabItem"},"Go to the the ",(0,r.yg)("a",{href:"/docs/dvl/intro#dv-launchpad-links"},"DV Launchpad")," and select ",(0,r.yg)("code",null,"Create a distributed validator alone"),". Follow the steps to configure your DV cluster. The Launchpad will give you a docker command to create your cluster. ",(0,r.yg)("br",null),"Before you run the command, clone the ",(0,r.yg)("a",{href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster.git"},"CDVC repo")," and ",(0,r.yg)("code",null,"cd")," into the directory.",(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'# Clone the repo\ngit clone https://github.com/ObolNetwork/charon-distributed-validator-cluster.git\n\n# Change directory\ncd charon-distributed-validator-cluster/\n\n# Run the command provided in the DV Launchpad "Create a cluster alone" flow\ndocker run -u $(id -u):$(id -g) --rm -v "$(pwd)/:/opt/charon" obolnetwork/charon:v1.0.0 create cluster --definition-file=...\n'))),(0,r.yg)(l.A,{value:"CLI",label:"CLI",mdxType:"TabItem"},(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Clone the ",(0,r.yg)("a",{href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},"CDVC repo")," and ",(0,r.yg)("code",null,"cd")," into the directory."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# Clone the repo\ngit clone https://github.com/ObolNetwork/charon-distributed-validator-cluster.git\n\n# Change directory\ncd charon-distributed-validator-cluster/\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Run the cluster creation command, setting required flag values."),(0,r.yg)("p",{parentName:"li"},"Run the below command to create the validator private key shares and cluster artifacts locally, replacing the example values for ",(0,r.yg)("inlineCode",{parentName:"p"},"nodes"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"network"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"num-validators"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"fee-recipient-addresses"),",  and ",(0,r.yg)("inlineCode",{parentName:"p"},"withdrawal-addresses"),".\nCheck the ",(0,r.yg)("a",{parentName:"p",href:"/docs/next/charon/charon-cli-reference#create-a-full-cluster-locally"},"Charon CLI reference")," for additional, optional flags to set."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'  docker run --rm -v "$(pwd):/opt/charon" obolnetwork/charon:v1.0.0 create cluster \\\n    --nodes=4 \\\n    --network=holesky \\\n    --num-validators=1 \\\n    --name="Quickstart Guide Cluster" \\\n    --cluster-dir="cluster" \\\n    --fee-recipient-addresses=0x000000000000000000000000000000000000dead \\\n    --withdrawal-addresses=0x000000000000000000000000000000000000dead\n')))),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"If you would like your cluster to appear on the ",(0,r.yg)("a",{parentName:"p",href:"../dvl/intro"},"DV Launchpad"),", add the ",(0,r.yg)("inlineCode",{parentName:"p"},"--publish")," flag to the command.")))),(0,r.yg)("br",null),(0,r.yg)("p",null,"After the ",(0,r.yg)("inlineCode",{parentName:"p"},"create cluster")," command is run, you should have multiple subfolders within the newly created ",(0,r.yg)("inlineCode",{parentName:"p"},"./cluster/")," folder, one for each node created."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Backup the ",(0,r.yg)("inlineCode",{parentName:"strong"},"./cluster/")," folder, then move on to deploying the cluster.")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Make sure your backup is secure and private, someone with access to these files could get the validators slashed.")),(0,r.yg)("h2",{id:"step-2-deploy-and-start-the-nodes"},"Step 2: Deploy and start the nodes"),(0,r.yg)(o.A,{groupId:"Local nodes-distributed nodes",mdxType:"Tabs"},(0,r.yg)(l.A,{value:"Run the nodes on a single machine",label:"Run the nodes on a single machine",default:!0,mdxType:"TabItem"},(0,r.yg)("admonition",{type:"warning"},(0,r.yg)("p",{parentName:"admonition"},"This part of the guide only runs one Execution Client, one Consensus Client, and 6 Distributed Validator Charon Client + Validator Client pairs on a single docker instance, and ",(0,r.yg)("strong",{parentName:"p"},"is not suitable for a mainnet deployment"),". (If this machine fails, there will not be any fault tolerance - the cluster will also fail.)"),(0,r.yg)("p",{parentName:"admonition"},"For a production deployment with fault tolerance, follow the part of the guide instructing you how to distribute the nodes across multiple machines.")),(0,r.yg)("p",null,"Run this command to start your cluster containers if you deployed using the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},"CDVC repo"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# Start the distributed validator cluster\ndocker compose up --build -d\n")),(0,r.yg)("p",null,"Check the monitoring dashboard and see if things look all right."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# Open Grafana\nopen http://localhost:3000/d/laEp8vupp\n"))),(0,r.yg)(l.A,{value:"Run the nodes on many machines",label:"Run the nodes on multiple machines",mdxType:"TabItem"},(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"To distribute your cluster across multiple machines, each node in the cluster needs one of the folders called ",(0,r.yg)("inlineCode",{parentName:"p"},"node*/")," to be copied to it. Each folder should be copied to a ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-node"},"CDVN repo")," and renamed from ",(0,r.yg)("inlineCode",{parentName:"p"},"node*")," to ",(0,r.yg)("inlineCode",{parentName:"p"},".charon"),"."),(0,r.yg)("p",{parentName:"admonition"},"Right now, the ",(0,r.yg)("inlineCode",{parentName:"p"},"charon create cluster")," command ",(0,r.yg)("a",{parentName:"p",href:"./quickstart_alone#step-1-create-the-key-shares-locally"},"used earlier to create the private keys")," outputs a folder structure like ",(0,r.yg)("inlineCode",{parentName:"p"},"cluster/node*/"),". Make sure to grab the ",(0,r.yg)("inlineCode",{parentName:"p"},"./node*/")," folders, ",(0,r.yg)("em",{parentName:"p"},"rename")," them to ",(0,r.yg)("inlineCode",{parentName:"p"},".charon")," and then move them to one of the single node repos below. Once all nodes are online, synced, and connected, you will be ready to activate your validator.")),(0,r.yg)("p",null," This is necessary for the folder to be found by the default ",(0,r.yg)("inlineCode",{parentName:"p"},"charon run")," command. Optionally, it is possible to override ",(0,r.yg)("inlineCode",{parentName:"p"},"charon run"),"'s default file locations by using ",(0,r.yg)("inlineCode",{parentName:"p"},'charon run --private-key-file="node0/charon-enr-private-key" --lock-file="node0/cluster-lock.json"')," for each instance of Charon you start (substituting ",(0,r.yg)("inlineCode",{parentName:"p"},"node0")," for each node number in your cluster as needed)."),(0,r.yg)("p",null," \ud83d\udc49 Use the single node ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-node"},"docker compose"),", the kubernetes ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-k8s-distributed-validator-node"},"manifests"),", or the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/helm-charts"},"helm chart")," example repos to get your nodes up and connected after loading the ",(0,r.yg)("inlineCode",{parentName:"p"},".charon")," folder artifacts into them appropriately."),(0,r.yg)("br",null),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-log",metastring:'title="Output from create cluster"',title:'"Output',from:!0,create:!0,'cluster"':!0},"cluster\n\u251c\u2500\u2500 node0\n\u2502   \u251c\u2500\u2500 charon-enr-private-key\n\u2502   \u251c\u2500\u2500 cluster-lock.json\n\u2502   \u251c\u2500\u2500 deposit-data.json\n\u2502   \u2514\u2500\u2500 validator_keys\n\u2502       \u251c\u2500\u2500 keystore-0.json\n\u2502       \u251c\u2500\u2500 keystore-0.txt\n\u2502       \u251c\u2500\u2500 ...\n\u2502       \u251c\u2500\u2500 keystore-N.json\n\u2502       \u2514\u2500\u2500 keystore-N.txt\n\u251c\u2500\u2500 node1\n\u2502   \u251c\u2500\u2500 charon-enr-private-key\n\u2502   \u251c\u2500\u2500 cluster-lock.json\n\u2502   \u251c\u2500\u2500 deposit-data.json\n\u2502   \u2514\u2500\u2500 validator_keys\n\u2502       \u251c\u2500\u2500 keystore-0.json\n\u2502       \u251c\u2500\u2500 keystore-0.txt\n\u2502       \u251c\u2500\u2500 ...\n\u2502       \u251c\u2500\u2500 keystore-N.json\n\u2502       \u2514\u2500\u2500 keystore-N.txt\n\u251c\u2500\u2500 node2\n\u2502   \u251c\u2500\u2500 charon-enr-private-key\n\u2502   \u251c\u2500\u2500 cluster-lock.json\n\u2502   \u251c\u2500\u2500 deposit-data.json\n\u2502   \u2514\u2500\u2500 validator_keys\n\u2502       \u251c\u2500\u2500 keystore-0.json\n\u2502       \u251c\u2500\u2500 keystore-0.txt\n\u2502       \u251c\u2500\u2500 ...\n\u2502       \u251c\u2500\u2500 keystore-N.json\n\u2502       \u2514\u2500\u2500 keystore-N.txt\n\u2514\u2500\u2500 node3\n    \u251c\u2500\u2500 charon-enr-private-key\n    \u251c\u2500\u2500 cluster-lock.json\n    \u251c\u2500\u2500 deposit-data.json\n    \u2514\u2500\u2500 validator_keys\n        \u251c\u2500\u2500 keystore-0.json\n        \u251c\u2500\u2500 keystore-0.txt\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 keystore-N.json\n        \u2514\u2500\u2500 keystore-N.txt\n\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-log",metastring:'title="Folder structure to be placed on each DV node"',title:'"Folder',structure:!0,to:!0,be:!0,placed:!0,on:!0,each:!0,DV:!0,'node"':!0},"\u2514\u2500\u2500 .charon\n    \u251c\u2500\u2500 charon-enr-private-key\n    \u251c\u2500\u2500 cluster-lock.json\n    \u251c\u2500\u2500 deposit-data.json\n    \u2514\u2500\u2500 validator_keys\n        \u251c\u2500\u2500 keystore-0.json\n        \u251c\u2500\u2500 keystore-0.txt\n        \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 keystore-N.json\n        \u2514\u2500\u2500 keystore-N.txt\n")),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"  Currently, the quickstart repo installs a node on the Holesky testnet. It is possible to choose a different network (another testnet, or mainnet) by overriding the ",(0,r.yg)("inlineCode",{parentName:"p"},".env")," file."),(0,r.yg)("p",{parentName:"admonition"},"  ",(0,r.yg)("inlineCode",{parentName:"p"},".env.sample")," is a sample environment file that allows overriding default configuration defined in ",(0,r.yg)("inlineCode",{parentName:"p"},"docker-compose.yml"),". Uncomment and set any variable to override its value."),(0,r.yg)("p",{parentName:"admonition"},"  Setup the desired inputs for the DV, including the network you wish to operate on. Check the ",(0,r.yg)("a",{parentName:"p",href:"/docs/next/charon/charon-cli-reference"},"Charon CLI reference")," for additional optional flags to set. Once you have set the values you wish to use. Make a copy of this file called ",(0,r.yg)("inlineCode",{parentName:"p"},".env"),"."),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'# Copy ".env.sample", renaming it ".env"\ncp .env.sample .env\n'))))))}y.isMDXComponent=!0}}]);