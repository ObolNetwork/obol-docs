"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[89294],{28171:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var i=n(74848),s=n(28453);const o={sidebar_position:5,description:"Smart Contract Audit"},l="Smart Contract Audit",r={id:"sec/smart_contract_audit",title:"Smart Contract Audit",description:"Smart Contract Audit",source:"@site/versioned_docs/version-v0.17.1/sec/smart_contract_audit.md",sourceDirName:"sec",slug:"/sec/smart_contract_audit",permalink:"/docs/v0.17.1/sec/smart_contract_audit",draft:!1,unlisted:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/versioned_docs/version-v0.17.1/sec/smart_contract_audit.md",tags:[],version:"v0.17.1",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Smart Contract Audit"},sidebar:"tutorialSidebar",previous:{title:"Software Development at Obol",permalink:"/docs/v0.17.1/sec/ev-assessment"},next:{title:"Charon threat model",permalink:"/docs/v0.17.1/sec/threat_model"}},a={},d=[{value:"About <strong>Obol</strong>",id:"about-obol",level:2},{value:"About <strong>zachobront</strong>",id:"about-zachobront",level:2},{value:"Summary &amp; Scope",id:"summary--scope",level:2},{value:"Summary of Findings",id:"summary-of-findings",level:2},{value:"Detailed Findings",id:"detailed-findings",level:2},{value:"[M-01] Future fees may be skirted by setting a non-ETH reward token",id:"m-01-future-fees-may-be-skirted-by-setting-a-non-eth-reward-token",level:3},{value:"Recommendation",id:"recommendation",level:4},{value:"Review",id:"review",level:4},{value:"[M-02] Splits with 256 or more node operators will not be able to switch on fees",id:"m-02-splits-with-256-or-more-node-operators-will-not-be-able-to-switch-on-fees",level:3},{value:"Proof of Concept",id:"proof-of-concept",level:4},{value:"Recommendation",id:"recommendation-1",level:4},{value:"Review",id:"review-1",level:4},{value:"[M-03] In a mass slashing event, node operators are incentivized to get slashed",id:"m-03-in-a-mass-slashing-event-node-operators-are-incentivized-to-get-slashed",level:3},{value:"Recommendations",id:"recommendations",level:4},{value:"Review",id:"review-2",level:4},{value:"[L-01] Obol fees will be applied retroactively to all non-distributed funds in the Splitter",id:"l-01-obol-fees-will-be-applied-retroactively-to-all-non-distributed-funds-in-the-splitter",level:3},{value:"Recommendation",id:"recommendation-2",level:4},{value:"Review",id:"review-3",level:4},{value:"[L-02] If OWR is used with rebase tokens and there&#39;s a negative rebase, principal can be lost",id:"l-02-if-owr-is-used-with-rebase-tokens-and-theres-a-negative-rebase-principal-can-be-lost",level:3},{value:"Recommendation",id:"recommendation-3",level:4},{value:"Review",id:"review-4",level:4},{value:"[L-03] LidoSplit can receive ETH, which will be locked in contract",id:"l-03-lidosplit-can-receive-eth-which-will-be-locked-in-contract",level:3},{value:"Proof of Concept",id:"proof-of-concept-1",level:4},{value:"Recommendation",id:"recommendation-4",level:4},{value:"Review",id:"review-5",level:4},{value:"[L-04] Upgrade to latest version of Solady to fix LibClone bug",id:"l-04-upgrade-to-latest-version-of-solady-to-fix-libclone-bug",level:3},{value:"Proof of Concept",id:"proof-of-concept-2",level:4},{value:"Recommendation",id:"recommendation-5",level:4},{value:"Review",id:"review-6",level:4},{value:"[G-01] stETH and wstETH addresses can be saved on implementation to save gas",id:"g-01-steth-and-wsteth-addresses-can-be-saved-on-implementation-to-save-gas",level:3},{value:"Recommendation",id:"recommendation-6",level:4},{value:"Review",id:"review-7",level:4},{value:"[G-02] OWR can be simplified and save gas by not tracking distributedFunds",id:"g-02-owr-can-be-simplified-and-save-gas-by-not-tracking-distributedfunds",level:3},{value:"Recommendation",id:"recommendation-7",level:4},{value:"Review",id:"review-8",level:4},{value:"[I-01] Strong trust assumptions between validators and node operators",id:"i-01-strong-trust-assumptions-between-validators-and-node-operators",level:3},{value:"Review",id:"review-9",level:4},{value:"[I-02] Provide node operator checklist to validate setup",id:"i-02-provide-node-operator-checklist-to-validate-setup",level:3},{value:"Review",id:"review-10",level:4}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"smart-contract-audit",children:"Smart Contract Audit"})}),"\n",(0,i.jsxs)("table",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{}),(0,i.jsx)("th",{})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:(0,i.jsx)("img",{src:"https://obol.tech/ObolIcon.png?ref=blog.obol.tech",width:"250",height:"250"})}),(0,i.jsxs)("td",{children:[(0,i.jsx)("h1",{children:"Obol Audit Report"}),(0,i.jsx)("h2",{children:"Obol Manager Contracts"}),(0,i.jsx)("p",{children:"Prepared by: Zach Obront, Independent Security Researcher"}),(0,i.jsx)("p",{children:"Date: Sept 18 to 22, 2023"})]})]})]}),"\n",(0,i.jsxs)(t.h2,{id:"about-obol",children:["About ",(0,i.jsx)(t.strong,{children:"Obol"})]}),"\n",(0,i.jsx)(t.p,{children:"The Obol Network is an ecosystem for trust minimized staking that enables people to create, test, run & co-ordinate distributed validators."}),"\n",(0,i.jsx)(t.p,{children:"The Obol Manager contracts are responsible for distributing validator rewards and withdrawals among the validator and node operators involved in a distributed validator."}),"\n",(0,i.jsxs)(t.h2,{id:"about-zachobront",children:["About ",(0,i.jsx)(t.strong,{children:"zachobront"})]}),"\n",(0,i.jsxs)(t.p,{children:["Zach Obront is an independent smart contract security researcher. He serves as a Lead Senior Watson at Sherlock, a Security Researcher at Spearbit, and has identified multiple critical severity bugs in the wild, including in a Top 5 Protocol on Immunefi. You can say hi on Twitter at ",(0,i.jsx)(t.a,{href:"http://twitter.com/zachobront",children:"@zachobront"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"summary--scope",children:"Summary & Scope"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/",children:"ObolNetwork/obol-manager-contracts"})," repository was audited at commit ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/tree/50ce277919723c80b96f6353fa8d1f8facda6e0e",children:"50ce277919723c80b96f6353fa8d1f8facda6e0e"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The following contracts were in scope:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"src/controllers/ImmutableSplitController.sol"}),"\n",(0,i.jsx)(t.li,{children:"src/controllers/ImmutableSplitControllerFactory.sol"}),"\n",(0,i.jsx)(t.li,{children:"src/lido/LidoSplit.sol"}),"\n",(0,i.jsx)(t.li,{children:"src/lido/LidoSplitFactory.sol"}),"\n",(0,i.jsx)(t.li,{children:"src/owr/OptimisticWithdrawalReceiver.sol"}),"\n",(0,i.jsx)(t.li,{children:"src/owr/OptimisticWithdrawalReceiverFactory.sol"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["After completion of the fixes, the ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/tree/2f4f059bfd145f5f05d794948c918d65d222c3a9",children:"2f4f059bfd145f5f05d794948c918d65d222c3a9"})," commit was reviewed. After this review, the updated Lido fee share system in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/96/files",children:"PR #96"})," was reviewed."]}),"\n",(0,i.jsx)(t.h2,{id:"summary-of-findings",children:"Summary of Findings"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Identifier"}),(0,i.jsx)(t.th,{children:"Title"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Severity"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Fixed"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#m-01-future-fees-may-be-skirted-by-setting-a-non-eth-reward-token",children:"M-01"})}),(0,i.jsx)(t.td,{children:"Future fees may be skirted by setting a non-ETH reward token"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Medium"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#m-02-splits-with-256-or-more-node-operators-will-not-be-able-to-switch-on-fees",children:"M-02"})}),(0,i.jsx)(t.td,{children:"Splits with 256 or more node operators will not be able to switch on fees"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Medium"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#m-03-in-a-mass-slashing-event-node-operators-are-incentivized-to-get-slashed",children:"M-03"})}),(0,i.jsx)(t.td,{children:"In a mass slashing event, node operators are incentivized to get slashed"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Medium"}),(0,i.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#l-01-obol-fees-will-be-applied-retroactively-to-all-non-distributed-funds-in-the-splitter",children:"L-01"})}),(0,i.jsx)(t.td,{children:"Obol fees will be applied retroactively to all non-distributed funds in the Splitter"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Low"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#l-02-if-owr-is-used-with-rebase-tokens-and-theres-a-negative-rebase-principal-can-be-lost",children:"L-02"})}),(0,i.jsx)(t.td,{children:"If OWR is used with rebase tokens and there's a negative rebase, principal can be lost"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Low"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#l-03-lidosplit-can-receive-eth-which-will-be-locked-in-contract",children:"L-03"})}),(0,i.jsx)(t.td,{children:"LidoSplit can receive ETH, which will be locked in contract"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Low"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#l-04-upgrade-to-latest-version-of-solady-to-fix-libclone-bug",children:"L-04"})}),(0,i.jsx)(t.td,{children:"Upgrade to latest version of Solady to fix LibClone bug"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Low"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#g-01-steth-and-wsteth-addresses-can-be-saved-on-implementation-to-save-gas",children:"G-01"})}),(0,i.jsx)(t.td,{children:"stETH and wstETH addresses can be saved on implementation to save gas"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Gas"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#g-02-owr-can-be-simplified-and-save-gas-by-not-tracking-distributedfunds",children:"G-02"})}),(0,i.jsx)(t.td,{children:"OWR can be simplified and save gas by not tracking distributedFunds"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Gas"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"\u2713"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#i-01-strong-trust-assumptions-between-validators-and-node-operators",children:"I-01"})}),(0,i.jsx)(t.td,{children:"Strong trust assumptions between validators and node operators"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Informational"}),(0,i.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.a,{href:"#i-02-provide-node-operator-checklist-to-validate-setup",children:"I-02"})}),(0,i.jsx)(t.td,{children:"Provide node operator checklist to validate setup"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Informational"}),(0,i.jsx)(t.td,{style:{textAlign:"center"}})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"detailed-findings",children:"Detailed Findings"}),"\n",(0,i.jsx)(t.h3,{id:"m-01-future-fees-may-be-skirted-by-setting-a-non-eth-reward-token",children:"[M-01] Future fees may be skirted by setting a non-ETH reward token"}),"\n",(0,i.jsxs)(t.p,{children:["Fees are planned to be implemented on the ",(0,i.jsx)(t.code,{children:"rewardRecipient"})," splitter by updating to a new fee structure using the ",(0,i.jsx)(t.code,{children:"ImmutableSplitController"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["It is assumed that all rewards will flow through the splitter, because (a) all distributed rewards less than 16 ETH are sent to the ",(0,i.jsx)(t.code,{children:"rewardRecipient"}),", and (b) even if a team waited for rewards to be greater than 16 ETH, rewards sent to the ",(0,i.jsx)(t.code,{children:"principalRecipient"})," are capped at the ",(0,i.jsx)(t.code,{children:"amountOfPrincipalStake"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["This creates a fairly strong guarantee that reward funds will flow to the ",(0,i.jsx)(t.code,{children:"rewardRecipient"}),". Even if a user were to set their ",(0,i.jsx)(t.code,{children:"amountOfPrincipalStake"})," high enough that the ",(0,i.jsx)(t.code,{children:"principalRecipient"})," could receive unlimited funds, the Obol team could call ",(0,i.jsx)(t.code,{children:"distributeFunds()"})," when the balance got near 16 ETH to ensure fees were paid."]}),"\n",(0,i.jsxs)(t.p,{children:["However, if the user selects a non-ETH token, all ETH will be withdrawable only thorugh the ",(0,i.jsx)(t.code,{children:"recoverFunds()"})," function. If they set up a split with their node operators as their ",(0,i.jsx)(t.code,{children:"recoveryAddress"}),", all funds will be withdrawable via ",(0,i.jsx)(t.code,{children:"recoverFunds()"})," without ever touching the ",(0,i.jsx)(t.code,{children:"rewardRecipient"})," or paying a fee."]}),"\n",(0,i.jsx)(t.h4,{id:"recommendation",children:"Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["I would recommend removing the ability to use a non-ETH token from the ",(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient"}),". Alternatively, if it feels like it may be a use case that is needed, it may make sense to always include ETH as a valid token, in addition to any ",(0,i.jsx)(t.code,{children:"OWRToken"})," set."]}),"\n",(0,i.jsx)(t.h4,{id:"review",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/85",children:"PR 85"})," by removing the ability to use non-ETH tokens."]}),"\n",(0,i.jsx)(t.h3,{id:"m-02-splits-with-256-or-more-node-operators-will-not-be-able-to-switch-on-fees",children:"[M-02] Splits with 256 or more node operators will not be able to switch on fees"}),"\n",(0,i.jsx)(t.p,{children:"0xSplits is used to distribute rewards across node operators. All Splits are deployed with an ImmutableSplitController, which is given permissions to update the split one time to add a fee for Obol at a future date."}),"\n",(0,i.jsxs)(t.p,{children:["The Factory deploys these controllers as Clones with Immutable Args, hard coding the ",(0,i.jsx)(t.code,{children:"owner"}),", ",(0,i.jsx)(t.code,{children:"accounts"}),", ",(0,i.jsx)(t.code,{children:"percentAllocations"}),", and ",(0,i.jsx)(t.code,{children:"distributorFee"})," for the future update. This data is packed as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"  function _packSplitControllerData(\n    address owner,\n    address[] calldata accounts,\n    uint32[] calldata percentAllocations,\n    uint32 distributorFee\n  ) internal view returns (bytes memory data) {\n    uint256 recipientsSize = accounts.length;\n    uint256[] memory recipients = new uint[](recipientsSize);\n\n    uint256 i = 0;\n    for (; i < recipientsSize;) {\n      recipients[i] = (uint256(percentAllocations[i]) << ADDRESS_BITS) | uint256(uint160(accounts[i]));\n\n      unchecked {\n        i++;\n      }\n    }\n\n    data = abi.encodePacked(splitMain, distributorFee, owner, uint8(recipientsSize), recipients);\n  }\n"})}),"\n",(0,i.jsxs)(t.p,{children:["In the process, ",(0,i.jsx)(t.code,{children:"recipientsSize"})," is unsafely downcasted into a ",(0,i.jsx)(t.code,{children:"uint8"}),", which has a maximum value of ",(0,i.jsx)(t.code,{children:"256"}),". As a result, any values greater than 256 will overflow and result in a lower value of ",(0,i.jsx)(t.code,{children:"recipients.length % 256"})," being passed as ",(0,i.jsx)(t.code,{children:"recipientsSize"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["When the Controller is deployed, the full list of ",(0,i.jsx)(t.code,{children:"percentAllocations"})," is passed to the ",(0,i.jsx)(t.code,{children:"validSplit"})," check, which will pass as expected. However, later, when ",(0,i.jsx)(t.code,{children:"updateSplit()"})," is called, the ",(0,i.jsx)(t.code,{children:"getNewSplitConfiguation()"})," function will only return the first ",(0,i.jsx)(t.code,{children:"recipientsSize"})," accounts, ignoring the rest."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"  function getNewSplitConfiguration()\n    public\n    pure\n    returns (address[] memory accounts, uint32[] memory percentAllocations)\n  {\n    // fetch the size first\n    // then parse the data gradually\n    uint256 size = _recipientsSize();\n    accounts = new address[](size);\n    percentAllocations = new uint32[](size);\n\n    uint256 i = 0;\n    for (; i < size;) {\n      uint256 recipient = _getRecipient(i);\n      accounts[i] = address(uint160(recipient));\n      percentAllocations[i] = uint32(recipient >> ADDRESS_BITS);\n      unchecked {\n        i++;\n      }\n    }\n  }\n"})}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"updateSplit()"})," is eventually called on ",(0,i.jsx)(t.code,{children:"splitsMain"})," to turn on fees, the ",(0,i.jsx)(t.code,{children:"validSplit()"})," check on that contract will revert because the sum of the percent allocations will no longer sum to ",(0,i.jsx)(t.code,{children:"1e6"}),", and the update will not be possible."]}),"\n",(0,i.jsx)(t.h4,{id:"proof-of-concept",children:"Proof of Concept"}),"\n",(0,i.jsxs)(t.p,{children:["The following test can be dropped into a file in ",(0,i.jsx)(t.code,{children:"src/test"})," to demonstrate that passing 400 accounts will result in a ",(0,i.jsx)(t.code,{children:"recipientSize"})," of ",(0,i.jsx)(t.code,{children:"400 - 256 = 144"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { Test } from "forge-std/Test.sol";\nimport { console } from "forge-std/console.sol";\nimport { ImmutableSplitControllerFactory } from "src/controllers/ImmutableSplitControllerFactory.sol";\nimport { ImmutableSplitController } from "src/controllers/ImmutableSplitController.sol";\n\ninterface ISplitsMain {\n    function createSplit(address[] calldata accounts, uint32[] calldata percentAllocations, uint32 distributorFee, address controller) external returns (address);\n}\n\ncontract ZachTest is Test {\n    function testZach_RecipientSizeCappedAt256Accounts() public {\n        vm.createSelectFork("https://mainnet.infura.io/v3/fb419f740b7e401bad5bec77d0d285a5");\n\n        ImmutableSplitControllerFactory factory = new ImmutableSplitControllerFactory(address(9999));\n        bytes32 deploymentSalt = keccak256(abi.encodePacked(uint256(1102)));\n        address owner = address(this);\n\n        address[] memory bigAccounts = new address[](400);\n        uint32[] memory bigPercentAllocations = new uint32[](400);\n\n        for (uint i = 0; i < 400; i++) {\n            bigAccounts[i] = address(uint160(i));\n            bigPercentAllocations[i] = 2500;\n        }\n\n        // confirmation that 0xSplits will allow creating a split with this many accounts\n        // dummy acct passed as controller, but doesn\'t matter for these purposes\n        address split = ISplitsMain(0x2ed6c4B5dA6378c7897AC67Ba9e43102Feb694EE).createSplit(bigAccounts, bigPercentAllocations, 0, address(8888));\n\n        ImmutableSplitController controller = factory.createController(split, owner, bigAccounts, bigPercentAllocations, 0, deploymentSalt);\n\n        // added a public function to controller to read recipient size directly\n        uint savedRecipientSize = controller.ZachTest__recipientSize();\n        assert(savedRecipientSize < 400);\n        console.log(savedRecipientSize); // 144\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-1",children:"Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["When packing the data in ",(0,i.jsx)(t.code,{children:"_packSplitControllerData()"}),", check ",(0,i.jsx)(t.code,{children:"recipientsSize"})," before downcasting to a uint8:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-diff",children:"function _packSplitControllerData(\n    address owner,\n    address[] calldata accounts,\n    uint32[] calldata percentAllocations,\n    uint32 distributorFee\n) internal view returns (bytes memory data) {\n    uint256 recipientsSize = accounts.length;\n+   if (recipientsSize > 256) revert InvalidSplit__TooManyAccounts(recipientSize);\n    ...\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"review-1",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed as recommended in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/86",children:"PR 86"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"m-03-in-a-mass-slashing-event-node-operators-are-incentivized-to-get-slashed",children:"[M-03] In a mass slashing event, node operators are incentivized to get slashed"}),"\n",(0,i.jsxs)(t.p,{children:["When the ",(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient"})," receives funds from the beacon chain, it uses the following rule to determine the allocation:"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"If the amount of funds to be distributed is greater than or equal to 16 ether, it is assumed that it is a withdrawal (to be returned to the principal, with a cap on principal withdrawals of the total amount they deposited)."}),"\n"]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Otherwise, it is assumed that the funds are rewards."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This value being as low as 16 ether protects against any predictable attack the node operator could perform. For example, due to the effect of hysteresis in updating effective balances, it does not seem to be possible for node operators to predictably bleed a withdrawal down to be below 16 ether (even if they timed a slashing perfectly)."}),"\n",(0,i.jsx)(t.p,{children:"However, in the event of a mass slashing event, slashing punishments can be much more severe than they otherwise would be. To calculate the size of a slash, we:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"take the total percentage of validator stake slashed in the 18 days preceding and following a user's slash"}),"\n",(0,i.jsx)(t.li,{children:"multiply this percentage by 3 (capped at 100%)"}),"\n",(0,i.jsx)(t.li,{children:"the full slashing penalty for a given validator equals 1/32 of their stake, plus the resulting percentage above applied to the remaining 31/32 of their stake"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In order for such penalties to bring the withdrawal balance below 16 ether (assuming a full 32 ether to start), we would need the percentage taken to be greater than ",(0,i.jsx)(t.code,{children:"15 / 31 = 48.3%"}),", which implies that ",(0,i.jsx)(t.code,{children:"48.3 / 3 = 16.1%"})," of validators would need to be slashed."]}),"\n",(0,i.jsx)(t.p,{children:"Because the measurement is taken from the 18 days before and after the incident, node operators would have the opportunity to see a mass slashing event unfold, and later decide that they would like to be slashed along with it."}),"\n",(0,i.jsx)(t.p,{children:"In the event that they observed that greater than 16.1% of validators were slashed, Obol node operators would be able to get themselves slashed, be exited with a withdrawal of less than 16 ether, and claim that withdrawal as rewards, effectively stealing from the principal recipient."}),"\n",(0,i.jsx)(t.h4,{id:"recommendations",children:"Recommendations"}),"\n",(0,i.jsx)(t.p,{children:"Find a solution that provides a higher level of guarantee that the funds withdrawn are actually rewards, and not a withdrawal."}),"\n",(0,i.jsx)(t.h4,{id:"review-2",children:"Review"}),"\n",(0,i.jsx)(t.p,{children:"Acknowledged. We believe this is a black swan event. It would require a major ETH client to be compromised, and would be a betrayal of trust, so likely not EV+ for doxxed operators. Users of this contract with unknown operators should be wary of such a risk."}),"\n",(0,i.jsx)(t.h3,{id:"l-01-obol-fees-will-be-applied-retroactively-to-all-non-distributed-funds-in-the-splitter",children:"[L-01] Obol fees will be applied retroactively to all non-distributed funds in the Splitter"}),"\n",(0,i.jsxs)(t.p,{children:["When Obol decides to turn on fees, a call will be made to ",(0,i.jsx)(t.code,{children:"ImmutableSplitController::updateSplit()"}),", which will take the predefined split parameters (the original user specified split with Obol's fees added in) and call ",(0,i.jsx)(t.code,{children:"updateSplit()"})," to implement the change."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"function updateSplit() external payable {\n    if (msg.sender != owner()) revert Unauthorized();\n\n    (address[] memory accounts, uint32[] memory percentAllocations) = getNewSplitConfiguration();\n\n    ISplitMain(splitMain()).updateSplit(split, accounts, percentAllocations, uint32(distributorFee()));\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If we look at the code on ",(0,i.jsx)(t.code,{children:"SplitsMain"}),", we can see that this ",(0,i.jsx)(t.code,{children:"updateSplit()"})," function is applied retroactively to all funds that are already in the split, because it updates the parameters without performing a distribution first:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"function updateSplit(\n    address split,\n    address[] calldata accounts,\n    uint32[] calldata percentAllocations,\n    uint32 distributorFee\n)\n    external\n    override\n    onlySplitController(split)\n    validSplit(accounts, percentAllocations, distributorFee)\n{\n    _updateSplit(split, accounts, percentAllocations, distributorFee);\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"This means that any funds that have been sent to the split but have not yet be distributed will be subject to the Obol fee. Since these splitters will be accumulating all execution layer fees, it is possible that some of them may have received large MEV bribes, where this after-the-fact fee could be quite expensive."}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-2",children:"Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["The most strict solution would be for the ",(0,i.jsx)(t.code,{children:"ImmutableSplitController"})," to store both the old split parameters and the new parameters. The old parameters could first be used to call ",(0,i.jsx)(t.code,{children:"distributeETH()"})," on the split, and then ",(0,i.jsx)(t.code,{children:"updateSplit()"})," could be called with the new parameters."]}),"\n",(0,i.jsxs)(t.p,{children:["If storing both sets of values seems too complex, the alternative would be to require that ",(0,i.jsx)(t.code,{children:"split.balance <= 1"})," to update the split. Then the Obol team could simply store the old parameters off chain to call ",(0,i.jsx)(t.code,{children:"distributeETH()"}),' on each split to "unlock" it to update the fees.']}),"\n",(0,i.jsxs)(t.p,{children:["(Note that for the second solution, the ETH balance should be less than or equal to 1, not 0, because 0xSplits stores empty balances as ",(0,i.jsx)(t.code,{children:"1"})," for gas savings.)"]}),"\n",(0,i.jsx)(t.h4,{id:"review-3",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed as recommended in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/86",children:"PR 86"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"l-02-if-owr-is-used-with-rebase-tokens-and-theres-a-negative-rebase-principal-can-be-lost",children:"[L-02] If OWR is used with rebase tokens and there's a negative rebase, principal can be lost"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient"})," is deployed with a specific token immutably set on the clone. It is presumed that that token will usually be ETH, but it can also be an ERC20 to account for future integrations with tokenized versions of ETH."]}),"\n",(0,i.jsxs)(t.p,{children:["In the event that one of these integrations used a rebasing version of ETH (like ",(0,i.jsx)(t.code,{children:"stETH"}),"), the architecture would need to be set up as follows:"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient => rewards to something like LidoSplit.sol => Split Wallet"})}),"\n",(0,i.jsx)(t.p,{children:"In this case, the OWR would need to be able to handle rebasing tokens."}),"\n",(0,i.jsx)(t.p,{children:"In the event that rebasing tokens are used, there is the risk that slashing or inactivity leads to a period with a negative rebase. In this case, the following chain of events could happen:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"distribute(PULL)"})," is called, setting ",(0,i.jsx)(t.code,{children:"fundsPendingWithdrawal == balance"})]}),"\n",(0,i.jsx)(t.li,{children:"rebasing causes the balance to decrease slightly"}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"distribute(PULL)"})," is called again, so when ",(0,i.jsx)(t.code,{children:"fundsToBeDistributed = balance - fundsPendingWithdrawal"})," is calculated in an unchecked block, it ends up being near ",(0,i.jsx)(t.code,{children:"type(uint256).max"})]}),"\n",(0,i.jsxs)(t.li,{children:["since this is more than ",(0,i.jsx)(t.code,{children:"16 ether"}),", the first ",(0,i.jsx)(t.code,{children:"amountOfPrincipalStake - _claimedPrincipalFunds"})," will be allocated to the principal recipient, and the rest to the reward recipient"]}),"\n",(0,i.jsxs)(t.li,{children:["we check that ",(0,i.jsx)(t.code,{children:"endingDistributedFunds <= type(uint128).max"}),", but unfortunately this check misses the issue, because only ",(0,i.jsx)(t.code,{children:"fundsToBeDistributed"})," underflows, not ",(0,i.jsx)(t.code,{children:"endingDistributedFunds"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"_claimedPrincipalFunds"})," is set to ",(0,i.jsx)(t.code,{children:"amountOfPrincipalStake"}),", so all future claims will go to the reward recipient"]}),"\n",(0,i.jsxs)(t.li,{children:["the ",(0,i.jsx)(t.code,{children:"pullBalances"})," for both recipients will be set higher than the balance of the contract, and so will be unusable"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["In this situation, the only way for the principal to get their funds back would be for the full ",(0,i.jsx)(t.code,{children:"amountOfPrincipalStake"})," to hit the contract at once, and for them to call ",(0,i.jsx)(t.code,{children:"withdraw()"})," before anyone called ",(0,i.jsx)(t.code,{children:"distribute(PUSH)"}),". If anyone was to be able to call ",(0,i.jsx)(t.code,{children:"distribute(PUSH)"})," before them, all principal would be sent to the reward recipient instead."]}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-3",children:"Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["Similar to #74, I would recommend removing the ability for the ",(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient"})," to accept non-ETH tokens."]}),"\n",(0,i.jsx)(t.p,{children:"Otherwise, I would recommend two changes for redundant safety:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Do not allow the OWR to be used with rebasing tokens."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Move the ",(0,i.jsx)(t.code,{children:"_fundsToBeDistributed = _endingDistributedFunds - _startingDistributedFunds;"})," out of the unchecked block. The case where ",(0,i.jsx)(t.code,{children:"_endingDistributedFunds"})," underflows is already handled by a later check, so this one change should be sufficient to prevent any risk of this issue."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"review-4",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/85",children:"PR 85"})," by removing the ability to use non-ETH tokens."]}),"\n",(0,i.jsx)(t.h3,{id:"l-03-lidosplit-can-receive-eth-which-will-be-locked-in-contract",children:"[L-03] LidoSplit can receive ETH, which will be locked in contract"}),"\n",(0,i.jsxs)(t.p,{children:["Each new ",(0,i.jsx)(t.code,{children:"LidoSplit"})," is deployed as a clone, which comes with a ",(0,i.jsx)(t.code,{children:"receive()"})," function for receiving ETH."]}),"\n",(0,i.jsxs)(t.p,{children:["However, the only function on ",(0,i.jsx)(t.code,{children:"LidoSplit"})," is ",(0,i.jsx)(t.code,{children:"distribute()"}),", which converts ",(0,i.jsx)(t.code,{children:"stETH"})," to ",(0,i.jsx)(t.code,{children:"wstETH"})," and transfers it to the ",(0,i.jsx)(t.code,{children:"splitWallet"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["While this contract should only be used for Lido to pay out rewards (which will come in ",(0,i.jsx)(t.code,{children:"stETH"}),"), it seems possible that users may accidentally use the same contract to receive other validator rewards (in ETH), or that Lido governance may introduce ETH payments in the future, which would cause the funds to be locked."]}),"\n",(0,i.jsx)(t.h4,{id:"proof-of-concept-1",children:"Proof of Concept"}),"\n",(0,i.jsxs)(t.p,{children:["The following test can be dropped into ",(0,i.jsx)(t.code,{children:"LidoSplit.t.sol"})," to confirm that the clones can currently receive ETH:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"function testZach_CanReceiveEth() public {\n    uint before = address(lidoSplit).balance;\n    payable(address(lidoSplit)).transfer(1 ether);\n    assertEq(address(lidoSplit).balance, before + 1 ether);\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-4",children:"Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["Introduce an additional function to ",(0,i.jsx)(t.code,{children:"LidoSplit.sol"})," which wraps ETH into stETH before calling ",(0,i.jsx)(t.code,{children:"distribute()"}),", in order to rescue any ETH accidentally sent to the contract."]}),"\n",(0,i.jsx)(t.h4,{id:"review-5",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/87/files",children:"PR 87"})," by adding a ",(0,i.jsx)(t.code,{children:"rescueFunds()"})," function that can send ETH or any ERC20 (except ",(0,i.jsx)(t.code,{children:"stETH"})," or ",(0,i.jsx)(t.code,{children:"wstETH"}),") to the ",(0,i.jsx)(t.code,{children:"splitWallet"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"l-04-upgrade-to-latest-version-of-solady-to-fix-libclone-bug",children:"[L-04] Upgrade to latest version of Solady to fix LibClone bug"}),"\n",(0,i.jsxs)(t.p,{children:["In the recent ",(0,i.jsx)(t.a,{href:"https://github.com/Vectorized/solady/blob/main/audits/cantina-solady-report.pdf",children:"Solady audit"}),", an issue was found the affects LibClone."]}),"\n",(0,i.jsx)(t.p,{children:"In short, LibClone assumes that the length of the immutable arguments on the clone will fit in 2 bytes. If it's larger, it overlaps other op codes and can lead to strange behaviors, including causing the deployment to fail or causing the deployment to succeed with no resulting bytecode."}),"\n",(0,i.jsxs)(t.p,{children:["Because the ",(0,i.jsx)(t.code,{children:"ImmutableSplitControllerFactory"})," allows the user to input arrays of any length that will be encoded as immutable arguments on the Clone, we can manipulate the length to accomplish these goals."]}),"\n",(0,i.jsxs)(t.p,{children:["Fortunately, failed deployments or empty bytecode (which causes a revert when ",(0,i.jsx)(t.code,{children:"init()"})," is called) are not problems in this case, as the transactions will fail, and it can only happen with unrealistically long arrays that would only be used by malicious users."]}),"\n",(0,i.jsx)(t.p,{children:"However, it is difficult to be sure how else this risk might be exploited by using the overflow to jump to later op codes, and it is recommended to update to a newer version of Solady where the issue has been resolved."}),"\n",(0,i.jsx)(t.h4,{id:"proof-of-concept-2",children:"Proof of Concept"}),"\n",(0,i.jsxs)(t.p,{children:["If we comment out the ",(0,i.jsx)(t.code,{children:"init()"})," call in the ",(0,i.jsx)(t.code,{children:"createController()"}),' call, we can see that the following test "successfully" deploys the controller, but the result is that there is no bytecode:']}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"function testZach__CreateControllerSoladyBug() public {\n    ImmutableSplitControllerFactory factory = new ImmutableSplitControllerFactory(address(9999));\n    bytes32 deploymentSalt = keccak256(abi.encodePacked(uint256(1102)));\n    address owner = address(this);\n\n    address[] memory bigAccounts = new address[](28672);\n    uint32[] memory bigPercentAllocations = new uint32[](28672);\n\n    for (uint i = 0; i < 28672; i++) {\n        bigAccounts[i] = address(uint160(i));\n        if (i < 32) bigPercentAllocations[i] = 820;\n        else bigPercentAllocations[i] = 34;\n    }\n\n    ImmutableSplitController controller = factory.createController(address(8888), owner, bigAccounts, bigPercentAllocations, 0, deploymentSalt);\n    assert(address(controller) != address(0));\n    assert(address(controller).code.length == 0);\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-5",children:"Recommendation"}),"\n",(0,i.jsxs)(t.p,{children:["Delete Solady and clone it from the most recent commit, or any commit after the fixes from ",(0,i.jsx)(t.a,{href:"https://github.com/Vectorized/solady/pull/548/files#diff-27a3ba4730de4b778ecba4697ab7dfb9b4f30f9e3666d1e5665b194fe6c9ae45",children:"PR #548"})," were merged."]}),"\n",(0,i.jsx)(t.h4,{id:"review-6",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Solady has been updated to v.0.0.123 in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/88",children:"PR 88"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"g-01-steth-and-wsteth-addresses-can-be-saved-on-implementation-to-save-gas",children:"[G-01] stETH and wstETH addresses can be saved on implementation to save gas"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"LidoSplitFactory"})," contract holds two immutable values for the addresses of the ",(0,i.jsx)(t.code,{children:"stETH"})," and ",(0,i.jsx)(t.code,{children:"wstETH"})," tokens."]}),"\n",(0,i.jsx)(t.p,{children:"When new clones are deployed, these values are encoded as immutable args. This adds the values to the contract code of the clone, so that each time a call is made, they are passed as calldata along to the implementation, which reads the values from the calldata for use."}),"\n",(0,i.jsxs)(t.p,{children:["Since these values will be consistent across all clones on the same chain, it would be more gas efficient to store them in the implementation directly, which can be done with ",(0,i.jsx)(t.code,{children:"immutable"})," storage values, set in the constructor."]}),"\n",(0,i.jsx)(t.p,{children:"This would save 40 bytes of calldata on each call to the clone, which leads to a savings of approximately 640 gas on each call."}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-6",children:"Recommendation"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Add the following to ",(0,i.jsx)(t.code,{children:"LidoSplit.sol"}),":"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"address immutable public stETH;\naddress immutable public wstETH;\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Add a constructor to ",(0,i.jsx)(t.code,{children:"LidoSplit.sol"})," which sets these immutable values. Solidity treats immutable values as constants and stores them directly in the contract bytecode, so they will be accessible from the clones."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Remove ",(0,i.jsx)(t.code,{children:"stETH"})," and ",(0,i.jsx)(t.code,{children:"wstETH"})," from ",(0,i.jsx)(t.code,{children:"LidoSplitFactory.sol"}),", both as storage values, arguments to the constructor, and arguments to ",(0,i.jsx)(t.code,{children:"clone()"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Adjust the ",(0,i.jsx)(t.code,{children:"distribute()"})," function in ",(0,i.jsx)(t.code,{children:"LidoSplit.sol"})," to read the storage values for these two addresses, and remove the helper functions to read the clone's immutable arguments for these two values."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"review-7",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed as recommended in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/87",children:"PR 87"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"g-02-owr-can-be-simplified-and-save-gas-by-not-tracking-distributedfunds",children:"[G-02] OWR can be simplified and save gas by not tracking distributedFunds"}),"\n",(0,i.jsxs)(t.p,{children:["Currently, the ",(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient"})," contract tracks four variables:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"distributedFunds: total amount of the token distributed via push or pull"}),"\n",(0,i.jsx)(t.li,{children:"fundsPendingWithdrawal: total balance distributed via pull that haven't been claimed yet"}),"\n",(0,i.jsx)(t.li,{children:"claimedPrincipalFunds: total amount of funds claimed by the principal recipient"}),"\n",(0,i.jsx)(t.li,{children:"pullBalances: individual pull balances that haven't been claimed yet"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsx)(t.code,{children:"_distributeFunds()"})," is called, we perform the following math (simplified to only include relevant updates):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"endingDistributedFunds = distributedFunds - fundsPendingWithdrawal + currentBalance;\nfundsToBeDistributed = endingDistributedFunds - distributedFunds;\ndistributedFunds = endingDistributedFunds;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["As we can see, ",(0,i.jsx)(t.code,{children:"distributedFunds"})," is added to the ",(0,i.jsx)(t.code,{children:"endingDistributedFunds"})," variable and then removed when calculating ",(0,i.jsx)(t.code,{children:"fundsToBeDistributed"}),", having no impact on the resulting ",(0,i.jsx)(t.code,{children:"fundsToBeDistributed"})," value."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"distributedFunds"})," variable is not read or used anywhere else on the contract."]}),"\n",(0,i.jsx)(t.h4,{id:"recommendation-7",children:"Recommendation"}),"\n",(0,i.jsx)(t.p,{children:"We can simplify the math and save substantial gas (a storage write plus additional operations) by not tracking this value at all."}),"\n",(0,i.jsxs)(t.p,{children:["This would allow us to calculate ",(0,i.jsx)(t.code,{children:"fundsToBeDistributed"})," directly, as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-solidity",children:"fundsToBeDistributed = currentBalance - fundsPendingWithdrawal;\n"})}),"\n",(0,i.jsx)(t.h4,{id:"review-8",children:"Review"}),"\n",(0,i.jsxs)(t.p,{children:["Fixed as recommended in ",(0,i.jsx)(t.a,{href:"https://github.com/ObolNetwork/obol-manager-contracts/pull/85",children:"PR 85"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"i-01-strong-trust-assumptions-between-validators-and-node-operators",children:"[I-01] Strong trust assumptions between validators and node operators"}),"\n",(0,i.jsx)(t.p,{children:"It is assumed that validators and node operators will always act in the best interest of the group, rather than in their selfish best interest."}),"\n",(0,i.jsx)(t.p,{children:"It is important to make clear to users that there are strong trust assumptions between the various parties involved in the DVT."}),"\n",(0,i.jsx)(t.p,{children:"Here are a select few examples of attacks that a malicious set of node operators could perform:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Since there is currently no mechanism for withdrawals besides the consensus of the node operators, a minority of them sufficient to withhold consensus could blackmail the principal for a payment of up to 16 ether in order to allow them to withdraw. Otherwise, they could turn off their node operators and force the principal to bleed down to a final withdrawn balance of just over 16 ether."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Node operators are all able to propose blocks within the P2P network, which are then propogated out to the rest of the network. Node software is accustomed to signing for blocks built by block builders based on the metadata including quantity of fees and the address they'll be sent to. This is enforced by social consensus, with block builders not wanting to harm validators in order to have their blocks accepted in the future. However, node operators in a DVT are not concerned with the social consensus of the network, and could therefore build blocks that include large MEV payments to their personal address (instead of the DVT's 0xSplit), add fictious metadata to the block header, have their fellow node operators accept the block, and take the MEV for themselves."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"While the withdrawal address is immutably set on the beacon chain to the OWR, the fee address is added by the nodes to each block. Any majority of node operators sufficient to reach consensus could create a new 0xSplit with only themselves on it, and use that for all execution layer fees. The principal (and other node operators) would not be able to stop them or withdraw their principal, and would be stuck with staked funds paying fees to the malicious node operators."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Note that there are likely many other possible attacks that malicious node operators could perform. This report is intended to demonstrate some examples of the trust level that is needed between validators and node operators, and to emphasize the importance of making these assumptions clear to users."}),"\n",(0,i.jsx)(t.h4,{id:"review-9",children:"Review"}),"\n",(0,i.jsx)(t.p,{children:"Acknowledged. We believe EIP 7002 will reduce this trust assumption as it would enable the validator exit via the execution layer withdrawal key."}),"\n",(0,i.jsx)(t.h3,{id:"i-02-provide-node-operator-checklist-to-validate-setup",children:"[I-02] Provide node operator checklist to validate setup"}),"\n",(0,i.jsx)(t.p,{children:"There are a number of ways that the user setting up the DVT could plant backdoors to harm the other users involved in the DVT."}),"\n",(0,i.jsx)(t.p,{children:"Each of these risks is possible to check before signing off on the setup, but some are rather hidden, so it would be useful for the protocol to provide a list of checks that node operators should do before signing off on the setup parameters (or, even better, provide these checks for them through the front end)."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Confirm that ",(0,i.jsx)(t.code,{children:"SplitsMain.getHash(split)"})," matches the hash of the parameters that the user is expecting to be used."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Confirm that the controller clone delegates to the correct implementation. If not, it could be pointed to delegate to ",(0,i.jsx)(t.code,{children:"SplitMain"})," and then called to ",(0,i.jsx)(t.code,{children:"transferControl()"})," to a user's own address, allowing them to update the split arbitrarily."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"OptimisticWithdrawalRecipient.getTranches()"})," should be called to check that ",(0,i.jsx)(t.code,{children:"amountOfPrincipalStake"})," is equal to the amount that they will actually be providing."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["The controller's ",(0,i.jsx)(t.code,{children:"owner"})," and future split including Obol fees should be provided to the user. They should be able to check that ",(0,i.jsx)(t.code,{children:"ImmutableSplitControllerFactory.predictSplitControllerAddress()"}),", with those parameters inputted, results in the controller that is actually listed on ",(0,i.jsx)(t.code,{children:"SplitsMain.getController(split)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"review-10",children:"Review"}),"\n",(0,i.jsx)(t.p,{children:"Acknowledged. We do some of these already (will add the remainder) automatically in the launchpad UI during the cluster confirmation phase by the node operator. We will also add it in markdown to the repo."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function l(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);