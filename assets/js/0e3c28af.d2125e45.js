"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[26060],{95788:(e,t,r)=>{r.d(t,{Iu:()=>d,yg:()=>g});var a=r(11504);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):n(n({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),h=i,g=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return r?a.createElement(g,n(n({ref:t},d),{},{components:r})):a.createElement(g,n({ref:t},d))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,n=new Array(o);n[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,n[1]=l;for(var c=2;c<o;c++)n[c]=r[c];return a.createElement.apply(null,n)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},10140:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>n,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=r(45072),i=(r(11504),r(95788));const o={description:"Creating a Distributed Validator cluster from scratch"},n="Distributed validator creation",l={unversionedId:"dv/validator-creation",id:"version-v0.5.0/dv/validator-creation",title:"Distributed validator creation",description:"Creating a Distributed Validator cluster from scratch",source:"@site/versioned_docs/version-v0.5.0/dv/02_validator-creation.md",sourceDirName:"dv",slug:"/dv/validator-creation",permalink:"/docs/v0.5.0/dv/validator-creation",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/versioned_docs/version-v0.5.0/dv/02_validator-creation.md",tags:[],version:"v0.5.0",sidebarPosition:2,frontMatter:{description:"Creating a Distributed Validator cluster from scratch"},sidebar:"tutorialSidebar",previous:{title:"Introducing Charon",permalink:"/docs/v0.5.0/dv/introducing-charon"},next:{title:"Middleware Architecture",permalink:"/docs/v0.5.0/dv/middleware-daemon"}},s={},c=[{value:"Stages of creating a distributed validator",id:"stages-of-creating-a-distributed-validator",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...o}=e;return(0,i.yg)(u,(0,a.c)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"distributed-validator-creation"},"Distributed validator creation"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"A sample Distributed Validator cluster",src:r(14892).c,width:"2596",height:"1460"})),(0,i.yg)("h3",{id:"stages-of-creating-a-distributed-validator"},"Stages of creating a distributed validator"),(0,i.yg)("p",null,"To create a distributed validator cluster, you and your group of operators need to complete the following steps:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"One operator begins the cluster setup on the ",(0,i.yg)("a",{parentName:"li",href:"/docs/v0.5.0/dvk/distributed_validator_launchpad"},"Distributed Validator Launchpad"),".",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"This involves setting all of the terms for the cluster, including; withdrawal address, fee recipient, validator count, operator addresses, etc. This information is known as a ",(0,i.yg)("inlineCode",{parentName:"li"},"cluster configuration"),"."),(0,i.yg)("li",{parentName:"ul"},"This operator also sets their charon client's Ethereum Node Record (ENR)."),(0,i.yg)("li",{parentName:"ul"},"This operator signs both the hash of the cluster config and the ENR to prove custody of their address."),(0,i.yg)("li",{parentName:"ul"},"This data is stored in the DV Launchpad data layer and a URL is generated. This is a link for the other operators to join and complete the ceremony."))),(0,i.yg)("li",{parentName:"ol"},"The other operators in the cluster follow this URL to the launchpad.",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"They review the terms of the cluster configuration."),(0,i.yg)("li",{parentName:"ul"},"The submit the ENR of their charon client."),(0,i.yg)("li",{parentName:"ul"},"They sign both the hash of the cluster config and their charon ENR to indicate acceptance of the terms "))),(0,i.yg)("li",{parentName:"ol"},"Once all operators have submitted signatures for the cluster configuration and ENRs, they can all download the cluster definition file. "),(0,i.yg)("li",{parentName:"ol"},"Every operator loads this cluster definition file into ",(0,i.yg)("inlineCode",{parentName:"li"},"charon dkg"),". The definition provides the charon process with the information it needs to complete the DKG ceremony with the other charon clients. "),(0,i.yg)("li",{parentName:"ol"},"Once all charon clients can communicate with one another, the DKG process completes. All operators end up with:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},"A cluster lockfile, which contains the original cluster configuration data, combined with the newly generated group public keys and their associated threshold verifiers. This file is needed by the ",(0,i.yg)("inlineCode",{parentName:"li"},"charon run")," command. "),(0,i.yg)("li",{parentName:"ul"},"Validator deposit data"),(0,i.yg)("li",{parentName:"ul"},"Validator exit data"),(0,i.yg)("li",{parentName:"ul"},"Validator private key shares "))),(0,i.yg)("li",{parentName:"ol"},"Operators can now take backups of the generated private key shares and definition.lock file. "),(0,i.yg)("li",{parentName:"ol"},"All operators load the keys and cluster lockfiles generated in the ceremony, into their staking deployments."),(0,i.yg)("li",{parentName:"ol"},"Operators can run a performance test of the configured cluster to ensure connectivity between all operators at a reasonable latency is observed."),(0,i.yg)("li",{parentName:"ol"},"Once all readiness tests have passed, one operator activates the distributed validator(s) with an on-chain deposit.")))}p.isMDXComponent=!0},14892:(e,t,r)=>{r.d(t,{c:()=>a});const a=r.p+"assets/images/ObolCluster-0bbe0b53c392ef9fbe6e5e3ef648ef0c.png"}}]);