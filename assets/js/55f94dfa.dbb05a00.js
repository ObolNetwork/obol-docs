"use strict";(self.webpackChunkobol_docs=self.webpackChunkobol_docs||[]).push([[42176],{95788:(e,t,r)=>{r.d(t,{Iu:()=>u,yg:()=>h});var a=r(11504);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(r),m=n,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return r?a.createElement(h,l(l({ref:t},u),{},{components:r})):a.createElement(h,l({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},12275:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(45072),n=(r(11504),r(95788));const i={sidebar_position:1,description:"Test the solo cluster locally"},l="Run a test cluster locally",o={unversionedId:"int/quickstart/alone/test-locally",id:"version-v0.16.0/int/quickstart/alone/test-locally",title:"Run a test cluster locally",description:"Test the solo cluster locally",source:"@site/versioned_docs/version-v0.16.0/int/quickstart/alone/test-locally.md",sourceDirName:"int/quickstart/alone",slug:"/int/quickstart/alone/test-locally",permalink:"/docs/v0.16.0/int/quickstart/alone/test-locally",draft:!1,editUrl:"https://github.com/ObolNetwork/obol-docs/edit/main/versioned_docs/version-v0.16.0/int/quickstart/alone/test-locally.md",tags:[],version:"v0.16.0",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Test the solo cluster locally"},sidebar:"tutorialSidebar",previous:{title:"Quickstart Guides",permalink:"/docs/v0.16.0/int/quickstart/"},next:{title:"Create the private key shares",permalink:"/docs/v0.16.0/int/quickstart/alone/create-keys"}},s={},c=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Create the key shares locally",id:"create-the-key-shares-locally",level:2},{value:"Start the cluster",id:"start-the-cluster",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.yg)(p,(0,a.c)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"run-a-test-cluster-locally"},"Run a test cluster locally"),(0,n.yg)("admonition",{type:"warning"},(0,n.yg)("p",{parentName:"admonition"},"This is a demo repo to understand how Distributed Validators work and is not suitable for a production deployment."),(0,n.yg)("p",{parentName:"admonition"},"This guide only runs one Execution Client, one Consensus Client, and 6 Distributed Validator Charon Client + Validator Client pairs on a single docker instance. As a consequence, if this machine fails, there will not be fault tolerance."),(0,n.yg)("p",{parentName:"admonition"},"Follow these two guides sequentially instead for production deployment: ",(0,n.yg)("a",{parentName:"p",href:"/docs/v0.16.0/int/quickstart/alone/create-keys"},"create keys centrally")," and ",(0,n.yg)("a",{parentName:"p",href:"/docs/v0.16.0/int/quickstart/alone/deploy"},"how to deploy them"),". ")),(0,n.yg)("p",null,"The ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},(0,n.yg)("inlineCode",{parentName:"a"},"charon-distributed-validator-cluster"))," repo contains six charon clients in separate docker containers along with an execution client and consensus client, simulating a Distributed Validator cluster running."),(0,n.yg)("p",null,"The default cluster consists of:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/NethermindEth/nethermind"},"Nethermind"),", an execution layer client"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse"),", a consensus layer client"),(0,n.yg)("li",{parentName:"ul"},"Six ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/ObolNetwork/charon"},"charon")," nodes"),(0,n.yg)("li",{parentName:"ul"},"A mixture of validator clients:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"VC0: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse")),(0,n.yg)("li",{parentName:"ul"},"vc1: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/ConsenSys/teku"},"Teku")),(0,n.yg)("li",{parentName:"ul"},"vc2: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/status-im/nimbus-eth2"},"Nimbus")),(0,n.yg)("li",{parentName:"ul"},"vc3: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/sigp/lighthouse"},"Lighthouse")),(0,n.yg)("li",{parentName:"ul"},"vc4: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/ConsenSys/teku"},"Teku")),(0,n.yg)("li",{parentName:"ul"},"vc5: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/status-im/nimbus-eth2"},"Nimbus"))))),(0,n.yg)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Ensure you have ",(0,n.yg)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"docker")," installed."),(0,n.yg)("li",{parentName:"ul"},"Ensure you have ",(0,n.yg)("a",{parentName:"li",href:"https://git-scm.com/downloads"},"git")," installed. "),(0,n.yg)("li",{parentName:"ul"},"Make sure ",(0,n.yg)("inlineCode",{parentName:"li"},"docker")," is running before executing the commands below.")),(0,n.yg)("h2",{id:"create-the-key-shares-locally"},"Create the key shares locally"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Clone the ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/ObolNetwork/charon-distributed-validator-cluster"},"charon-distributed-validator-cluster")," repo and ",(0,n.yg)("inlineCode",{parentName:"p"},"cd")," into the directory."),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"# Clone the repo\ngit clone https://github.com/ObolNetwork/charon-distributed-validator-cluster.git\n\n# Change directory\ncd charon-distributed-validator-cluster/\n"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Prepare the environment variables"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"# Copy the sample environment variables\ncp .env.sample .env\n")),(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},".env.sample")," is a sample environment file that allows overriding default configuration defined in ",(0,n.yg)("inlineCode",{parentName:"p"},"docker-compose.yml"),". Uncomment and set any variable to override its value.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Create the artifacts needed to run a DV cluster by running the following command:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-sh"},'# Enter required validator addresses\nWITHDRAWAL_ADDR=<ENTER YOUR WITHDRAWAL ADDRESS HERE>\nFEE_RECIPIENT_ADDR=<ENTER YOUR FEE RECIPIENT ADDRESS HERE>\n\n# Create a distributed validator cluster\ndocker run --rm -v "$(pwd):/opt/charon" obolnetwork/charon:v0.16.0 create cluster --name="mycluster" --withdrawal-addresses="${WITHDRAWAL_ADDR}" --fee-recipient-addresses="${FEE_RECIPIENT_ADDR}" --nodes 6 --threshold 5\n')))),(0,n.yg)("p",null,"These commands will create a subdirectory ",(0,n.yg)("inlineCode",{parentName:"p"},".charon/cluster"),". In it are six folders, one for each charon node created. Each folder contains partial private keys that together make up the distributed validator described in ",(0,n.yg)("inlineCode",{parentName:"p"},".charon/cluster/cluster-lock.json"),"."),(0,n.yg)("h2",{id:"start-the-cluster"},"Start the cluster"),(0,n.yg)("p",null,"Run this command to start your cluster containers"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"# Start the distributed validator cluster\ndocker compose up --build\n")),(0,n.yg)("p",null,"Check the monitoring dashboard and see if things look all right"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-sh"},"# Open Grafana\nopen http://localhost:3000/d/laEp8vupp\n")))}d.isMDXComponent=!0}}]);